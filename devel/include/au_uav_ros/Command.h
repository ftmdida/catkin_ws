/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/viki/catkin_ws/src/au_uav_ros/msg/Command.msg
 *
 */


#ifndef AU_UAV_ROS_MESSAGE_COMMAND_H
#define AU_UAV_ROS_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace au_uav_ros
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : commandHeader()
    , planeID(0)
    , sim(false)
    , commandID(0)
    , param(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
    }
  Command_(const ContainerAllocator& _alloc)
    : commandHeader(_alloc)
    , planeID(0)
    , sim(false)
    , commandID(0)
    , param(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _commandHeader_type;
  _commandHeader_type commandHeader;

   typedef int16_t _planeID_type;
  _planeID_type planeID;

   typedef uint8_t _sim_type;
  _sim_type sim;

   typedef int16_t _commandID_type;
  _commandID_type commandID;

   typedef int16_t _param_type;
  _param_type param;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;




  typedef boost::shared_ptr< ::au_uav_ros::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::au_uav_ros::Command_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct Command_

typedef ::au_uav_ros::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::au_uav_ros::Command > CommandPtr;
typedef boost::shared_ptr< ::au_uav_ros::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::au_uav_ros::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::au_uav_ros::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace au_uav_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'au_uav_ros': ['/home/viki/catkin_ws/src/au_uav_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::au_uav_ros::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::au_uav_ros::Command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::au_uav_ros::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::au_uav_ros::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::au_uav_ros::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::au_uav_ros::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::au_uav_ros::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e70dce39587744dc9f4824069b3bb102";
  }

  static const char* value(const ::au_uav_ros::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe70dce39587744dcULL;
  static const uint64_t static_value2 = 0x9f4824069b3bb102ULL;
};

template<class ContainerAllocator>
struct DataType< ::au_uav_ros::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "au_uav_ros/Command";
  }

  static const char* value(const ::au_uav_ros::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::au_uav_ros::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header commandHeader\n\
int16 planeID\n\
bool sim\n\
int16 commandID\n\
int16 param\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::au_uav_ros::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::au_uav_ros::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commandHeader);
      stream.next(m.planeID);
      stream.next(m.sim);
      stream.next(m.commandID);
      stream.next(m.param);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::au_uav_ros::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::au_uav_ros::Command_<ContainerAllocator>& v)
  {
    s << indent << "commandHeader: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.commandHeader);
    s << indent << "planeID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.planeID);
    s << indent << "sim: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sim);
    s << indent << "commandID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.commandID);
    s << indent << "param: ";
    Printer<int16_t>::stream(s, indent + "  ", v.param);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AU_UAV_ROS_MESSAGE_COMMAND_H
